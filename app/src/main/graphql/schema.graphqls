type Query {
  muestrasVg: [MuestraVGType]

  muestraVgById(pk: ID): MuestraVGType

  empresas: [EmpresaType]

  empresaById(pk: ID!): EmpresaType

  userById(pk: ID): UserType
}

type MuestraVGType {
  id: ID!

  muestra: Decimal!

  fecha: Date
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Decimal` scalar type represents a python Decimal.
"""
scalar Decimal

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type EmpresaType {
  id: Int

  ruc: String

  razonSocial: String

  direccion: String

  telefono: String

  correo: String

  password: String

  logo: String

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  activo: Boolean!

  zonaSet: [ZonaType]

  userSet: [UserType]
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type ZonaType {
  id: Int

  codigo: String

  nombre: String

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  empresa: EmpresaType

  activo: Boolean!

  fundoSet: [FundoType]

  empresaId: Int
}

type FundoType {
  id: Int

  codigo: String

  nombre: String

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  zona: ZonaType

  activo: Boolean!

  userSet: [UserType!]!

  loteSet: [LoteType]

  zonaId: Int

  userFundoSet: [UserFundoType]
}

type UserType {
  id: Int

  password: String!

  lastLogin: DateTime

  """
  Indica que este usuario tiene todos los permisos sin asignárselos explícitamente.
  """
  isSuperuser: Boolean!

  """
  Requerido. 150 carácteres como máximo. Únicamente letras, dígitos y @/./+/-/_ 
  """
  username: String!

  firstName: String!

  lastName: String!

  email: String!

  """
  Indica si el usuario puede entrar en este sitio de administración.
  """
  isStaff: Boolean!

  """
  Indica si el usuario debe ser tratado como activo. Desmarque esta opción en lugar de borrar la cuenta.
  """
  isActive: Boolean!

  dateJoined: DateTime!

  document: String

  phone: String

  photo: String

  funds: [FundoType!]!

  fundoSet: [FundoType]
}

type LoteType {
  id: Int

  codigo: String

  nombre: String

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  fundo: FundoType

  activo: Boolean!

  campaniaSet: [CampaniaType]

  fundoId: Int
}

type CampaniaType {
  id: Int

  numero: Int!

  centroCosto: String

  inicio: Date

  inicioCampania: Date

  inicioCosecha: Date

  final: Date

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  lote: LoteType

  activo: Boolean!

  turnoSet: [TurnoType]

  loteId: Int

  cultivoId: Int
}

type TurnoType {
  id: Int

  numero: String

  nombre: String

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  campania: CampaniaType

  activo: Boolean!

  valvulaSet: [ValvulaType]

  campaniaId: Int
}

type ValvulaType {
  id: Int

  codigo: String

  nombre: String

  turno: TurnoType

  area: Decimal!

  densidad: Int!

  fechaCreacion: DateTime!

  fechaModificacion: DateTime!

  activo: Boolean!

  poligonoSet: [PoligonoType]

  turnoId: Int
}

type PoligonoType {
  id: Int

  valvula: ValvulaType

  latitud: Float!

  longitud: Float!

  valvulaId: Int
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

type UserFundoType {
  userId: Int

  fundoId: Int
}

type Mutation {
  createMuestraVg(fecha: String, muestra: Float, variableGrupoId: Int): CreateMuestraVGMutation

  updateMuestraVg(fecha: String, id: ID!, muestra: Float, variableGrupoId: Int): UpdateMuestraVGMutation

  loginEmpresa(correo: String!, password: String!, ruc: String!): LoginEmpresa

  createUser(document: String, email: String, firstName: String, isActive: Boolean, lastName: String, names: String, password: String, phone: String): CreateUserMutation

  updateUser(document: String, email: String, firstName: String, id: ID!, isActive: Boolean, lastName: String, password: String, phone: String): UpdateUserMutation
}

type CreateMuestraVGMutation {
  message: String
}

type UpdateMuestraVGMutation {
  message: String
}

type LoginEmpresa {
  empresa: EmpresaType

  message: String

  success: Boolean
}

type CreateUserMutation {
  message: String
}

type UpdateUserMutation {
  message: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
